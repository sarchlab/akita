// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/akita/v4/mem/mem (interfaces: AddressToPortMapper)
//
// Generated by this command:
//
//	mockgen -destination mock_mem_test.go -package writeevict -write_package_comment=false github.com/sarchlab/akita/v4/mem/mem AddressToPortMapper
//

package writeevict

import (
	reflect "reflect"

	sim "github.com/sarchlab/akita/v4/sim"
	gomock "go.uber.org/mock/gomock"
)

// MockAddressToPortMapper is a mock of AddressToPortMapper interface.
type MockAddressToPortMapper struct {
	ctrl     *gomock.Controller
	recorder *MockAddressToPortMapperMockRecorder
	isgomock struct{}
}

// MockAddressToPortMapperMockRecorder is the mock recorder for MockAddressToPortMapper.
type MockAddressToPortMapperMockRecorder struct {
	mock *MockAddressToPortMapper
}

// NewMockAddressToPortMapper creates a new mock instance.
func NewMockAddressToPortMapper(ctrl *gomock.Controller) *MockAddressToPortMapper {
	mock := &MockAddressToPortMapper{ctrl: ctrl}
	mock.recorder = &MockAddressToPortMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressToPortMapper) EXPECT() *MockAddressToPortMapperMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockAddressToPortMapper) Find(address uint64) sim.RemotePort {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", address)
	ret0, _ := ret[0].(sim.RemotePort)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockAddressToPortMapperMockRecorder) Find(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAddressToPortMapper)(nil).Find), address)
}
