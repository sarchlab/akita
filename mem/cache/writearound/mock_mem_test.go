// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/akita/v4/mem/mem (interfaces: AddressToPortMapper)

package writearound

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sim "github.com/sarchlab/akita/v4/sim"
)

// MockAddressToPortMapper is a mock of AddressToPortMapper interface.
type MockAddressToPortMapper struct {
	ctrl     *gomock.Controller
	recorder *MockAddressToPortMapperMockRecorder
}

// MockAddressToPortMapperMockRecorder is the mock recorder for MockAddressToPortMapper.
type MockAddressToPortMapperMockRecorder struct {
	mock *MockAddressToPortMapper
}

// NewMockAddressToPortMapper creates a new mock instance.
func NewMockAddressToPortMapper(ctrl *gomock.Controller) *MockAddressToPortMapper {
	mock := &MockAddressToPortMapper{ctrl: ctrl}
	mock.recorder = &MockAddressToPortMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressToPortMapper) EXPECT() *MockAddressToPortMapperMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockAddressToPortMapper) Find(arg0 uint64) sim.Port {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(sim.Port)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockAddressToPortMapperMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAddressToPortMapper)(nil).Find), arg0)
}
