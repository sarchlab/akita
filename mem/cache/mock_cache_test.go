// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/akita/v4/mem/cache (interfaces: VictimFinder,Directory)
//
// Generated by this command:
//
//	mockgen -destination mock_cache_test.go -package cache -write_package_comment=false -self_package=github.com/sarchlab/akita/v4/mem/cache github.com/sarchlab/akita/v4/mem/cache VictimFinder,Directory
//

package cache

import (
	reflect "reflect"

	vm "github.com/sarchlab/akita/v4/mem/vm"
	gomock "go.uber.org/mock/gomock"
)

// MockVictimFinder is a mock of VictimFinder interface.
type MockVictimFinder struct {
	ctrl     *gomock.Controller
	recorder *MockVictimFinderMockRecorder
	isgomock struct{}
}

// MockVictimFinderMockRecorder is the mock recorder for MockVictimFinder.
type MockVictimFinderMockRecorder struct {
	mock *MockVictimFinder
}

// NewMockVictimFinder creates a new mock instance.
func NewMockVictimFinder(ctrl *gomock.Controller) *MockVictimFinder {
	mock := &MockVictimFinder{ctrl: ctrl}
	mock.recorder = &MockVictimFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVictimFinder) EXPECT() *MockVictimFinderMockRecorder {
	return m.recorder
}

// FindVictim mocks base method.
func (m *MockVictimFinder) FindVictim(set *Set) *Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVictim", set)
	ret0, _ := ret[0].(*Block)
	return ret0
}

// FindVictim indicates an expected call of FindVictim.
func (mr *MockVictimFinderMockRecorder) FindVictim(set any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVictim", reflect.TypeOf((*MockVictimFinder)(nil).FindVictim), set)
}

// MockDirectory is a mock of Directory interface.
type MockDirectory struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryMockRecorder
	isgomock struct{}
}

// MockDirectoryMockRecorder is the mock recorder for MockDirectory.
type MockDirectoryMockRecorder struct {
	mock *MockDirectory
}

// NewMockDirectory creates a new mock instance.
func NewMockDirectory(ctrl *gomock.Controller) *MockDirectory {
	mock := &MockDirectory{ctrl: ctrl}
	mock.recorder = &MockDirectoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectory) EXPECT() *MockDirectoryMockRecorder {
	return m.recorder
}

// FindVictim mocks base method.
func (m *MockDirectory) FindVictim(address uint64) *Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVictim", address)
	ret0, _ := ret[0].(*Block)
	return ret0
}

// FindVictim indicates an expected call of FindVictim.
func (mr *MockDirectoryMockRecorder) FindVictim(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVictim", reflect.TypeOf((*MockDirectory)(nil).FindVictim), address)
}

// GetSets mocks base method.
func (m *MockDirectory) GetSets() []Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSets")
	ret0, _ := ret[0].([]Set)
	return ret0
}

// GetSets indicates an expected call of GetSets.
func (mr *MockDirectoryMockRecorder) GetSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSets", reflect.TypeOf((*MockDirectory)(nil).GetSets))
}

// Lookup mocks base method.
func (m *MockDirectory) Lookup(pid vm.PID, address uint64) *Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", pid, address)
	ret0, _ := ret[0].(*Block)
	return ret0
}

// Lookup indicates an expected call of Lookup.
func (mr *MockDirectoryMockRecorder) Lookup(pid, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockDirectory)(nil).Lookup), pid, address)
}

// Reset mocks base method.
func (m *MockDirectory) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockDirectoryMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockDirectory)(nil).Reset))
}

// TotalSize mocks base method.
func (m *MockDirectory) TotalSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// TotalSize indicates an expected call of TotalSize.
func (mr *MockDirectoryMockRecorder) TotalSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSize", reflect.TypeOf((*MockDirectory)(nil).TotalSize))
}

// Visit mocks base method.
func (m *MockDirectory) Visit(block *Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Visit", block)
}

// Visit indicates an expected call of Visit.
func (mr *MockDirectoryMockRecorder) Visit(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MockDirectory)(nil).Visit), block)
}

// WayAssociativity mocks base method.
func (m *MockDirectory) WayAssociativity() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WayAssociativity")
	ret0, _ := ret[0].(int)
	return ret0
}

// WayAssociativity indicates an expected call of WayAssociativity.
func (mr *MockDirectoryMockRecorder) WayAssociativity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WayAssociativity", reflect.TypeOf((*MockDirectory)(nil).WayAssociativity))
}
