// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/akita/v4/mem/vm/tlb/internal (interfaces: Set)
//
// Generated by this command:
//
//	mockgen -destination mock_internal_test.go -package tlb -write_package_comment=false github.com/sarchlab/akita/v4/mem/vm/tlb/internal Set
//

package tlb

import (
	reflect "reflect"

	vm "github.com/sarchlab/akita/v4/mem/vm"
	gomock "go.uber.org/mock/gomock"
)

// MockSet is a mock of Set interface.
type MockSet struct {
	ctrl     *gomock.Controller
	recorder *MockSetMockRecorder
	isgomock struct{}
}

// MockSetMockRecorder is the mock recorder for MockSet.
type MockSetMockRecorder struct {
	mock *MockSet
}

// NewMockSet creates a new mock instance.
func NewMockSet(ctrl *gomock.Controller) *MockSet {
	mock := &MockSet{ctrl: ctrl}
	mock.recorder = &MockSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSet) EXPECT() *MockSetMockRecorder {
	return m.recorder
}

// Evict mocks base method.
func (m *MockSet) Evict() (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evict")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Evict indicates an expected call of Evict.
func (mr *MockSetMockRecorder) Evict() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evict", reflect.TypeOf((*MockSet)(nil).Evict))
}

// Lookup mocks base method.
func (m *MockSet) Lookup(pid vm.PID, vAddr uint64) (int, vm.Page, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", pid, vAddr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(vm.Page)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// Lookup indicates an expected call of Lookup.
func (mr *MockSetMockRecorder) Lookup(pid, vAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockSet)(nil).Lookup), pid, vAddr)
}

// Update mocks base method.
func (m *MockSet) Update(wayID int, page vm.Page) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", wayID, page)
}

// Update indicates an expected call of Update.
func (mr *MockSetMockRecorder) Update(wayID, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSet)(nil).Update), wayID, page)
}

// Visit mocks base method.
func (m *MockSet) Visit(wayID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Visit", wayID)
}

// Visit indicates an expected call of Visit.
func (mr *MockSetMockRecorder) Visit(wayID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MockSet)(nil).Visit), wayID)
}
