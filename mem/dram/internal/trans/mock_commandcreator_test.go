// Code generated by MockGen. DO NOT EDIT.
// Source: commandcreator.go
//
// Generated by this command:
//
//	mockgen -source commandcreator.go -destination mock_commandcreator_test.go -self_package github.com/sarchlab/akita/v4/mem/dram/internal/trans -package trans
//

// Package trans is a generated GoMock package.
package trans

import (
	reflect "reflect"

	signal "github.com/sarchlab/akita/v4/mem/dram/internal/signal"
	gomock "go.uber.org/mock/gomock"
)

// MockCommandCreator is a mock of CommandCreator interface.
type MockCommandCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCommandCreatorMockRecorder
	isgomock struct{}
}

// MockCommandCreatorMockRecorder is the mock recorder for MockCommandCreator.
type MockCommandCreatorMockRecorder struct {
	mock *MockCommandCreator
}

// NewMockCommandCreator creates a new mock instance.
func NewMockCommandCreator(ctrl *gomock.Controller) *MockCommandCreator {
	mock := &MockCommandCreator{ctrl: ctrl}
	mock.recorder = &MockCommandCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandCreator) EXPECT() *MockCommandCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommandCreator) Create(subTrans *signal.SubTransaction) *signal.Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", subTrans)
	ret0, _ := ret[0].(*signal.Command)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCommandCreatorMockRecorder) Create(subTrans any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommandCreator)(nil).Create), subTrans)
}
