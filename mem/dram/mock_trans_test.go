// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/akita/v4/mem/dram/internal/trans (interfaces: SubTransactionQueue,SubTransSplitter)
//
// Generated by this command:
//
//	mockgen -destination mock_trans_test.go -package dram -write_package_comment=false github.com/sarchlab/akita/v4/mem/dram/internal/trans SubTransactionQueue,SubTransSplitter
//

package dram

import (
	reflect "reflect"

	signal "github.com/sarchlab/akita/v4/mem/dram/internal/signal"
	gomock "go.uber.org/mock/gomock"
)

// MockSubTransactionQueue is a mock of SubTransactionQueue interface.
type MockSubTransactionQueue struct {
	ctrl     *gomock.Controller
	recorder *MockSubTransactionQueueMockRecorder
	isgomock struct{}
}

// MockSubTransactionQueueMockRecorder is the mock recorder for MockSubTransactionQueue.
type MockSubTransactionQueueMockRecorder struct {
	mock *MockSubTransactionQueue
}

// NewMockSubTransactionQueue creates a new mock instance.
func NewMockSubTransactionQueue(ctrl *gomock.Controller) *MockSubTransactionQueue {
	mock := &MockSubTransactionQueue{ctrl: ctrl}
	mock.recorder = &MockSubTransactionQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubTransactionQueue) EXPECT() *MockSubTransactionQueueMockRecorder {
	return m.recorder
}

// CanPush mocks base method.
func (m *MockSubTransactionQueue) CanPush(n int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanPush", n)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanPush indicates an expected call of CanPush.
func (mr *MockSubTransactionQueueMockRecorder) CanPush(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanPush", reflect.TypeOf((*MockSubTransactionQueue)(nil).CanPush), n)
}

// Push mocks base method.
func (m *MockSubTransactionQueue) Push(t *signal.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", t)
}

// Push indicates an expected call of Push.
func (mr *MockSubTransactionQueueMockRecorder) Push(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockSubTransactionQueue)(nil).Push), t)
}

// Tick mocks base method.
func (m *MockSubTransactionQueue) Tick() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tick")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Tick indicates an expected call of Tick.
func (mr *MockSubTransactionQueueMockRecorder) Tick() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tick", reflect.TypeOf((*MockSubTransactionQueue)(nil).Tick))
}

// MockSubTransSplitter is a mock of SubTransSplitter interface.
type MockSubTransSplitter struct {
	ctrl     *gomock.Controller
	recorder *MockSubTransSplitterMockRecorder
	isgomock struct{}
}

// MockSubTransSplitterMockRecorder is the mock recorder for MockSubTransSplitter.
type MockSubTransSplitterMockRecorder struct {
	mock *MockSubTransSplitter
}

// NewMockSubTransSplitter creates a new mock instance.
func NewMockSubTransSplitter(ctrl *gomock.Controller) *MockSubTransSplitter {
	mock := &MockSubTransSplitter{ctrl: ctrl}
	mock.recorder = &MockSubTransSplitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubTransSplitter) EXPECT() *MockSubTransSplitterMockRecorder {
	return m.recorder
}

// Split mocks base method.
func (m *MockSubTransSplitter) Split(t *signal.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Split", t)
}

// Split indicates an expected call of Split.
func (mr *MockSubTransSplitterMockRecorder) Split(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Split", reflect.TypeOf((*MockSubTransSplitter)(nil).Split), t)
}
