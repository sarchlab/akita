// Code generated by MockGen. DO NOT EDIT.
// Source: PerfAnalyzer.go

package analysis

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPerfLogger is a mock of PerfLogger interface.
type MockPerfLogger struct {
	ctrl     *gomock.Controller
	recorder *MockPerfLoggerMockRecorder
}

// MockPerfLoggerMockRecorder is the mock recorder for MockPerfLogger.
type MockPerfLoggerMockRecorder struct {
	mock *MockPerfLogger
}

// NewMockPerfLogger creates a new mock instance.
func NewMockPerfLogger(ctrl *gomock.Controller) *MockPerfLogger {
	mock := &MockPerfLogger{ctrl: ctrl}
	mock.recorder = &MockPerfLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerfLogger) EXPECT() *MockPerfLoggerMockRecorder {
	return m.recorder
}

// AddDataEntry mocks base method.
func (m *MockPerfLogger) AddDataEntry(entry PerfAnalyzerEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDataEntry", entry)
}

// AddDataEntry indicates an expected call of AddDataEntry.
func (mr *MockPerfLoggerMockRecorder) AddDataEntry(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDataEntry", reflect.TypeOf((*MockPerfLogger)(nil).AddDataEntry), entry)
}
