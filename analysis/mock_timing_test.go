// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/akita/v4/sim/timing (interfaces: TimeTeller)

package analysis

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTimeTeller is a mock of TimeTeller interface.
type MockTimeTeller struct {
	ctrl     *gomock.Controller
	recorder *MockTimeTellerMockRecorder
}

// MockTimeTellerMockRecorder is the mock recorder for MockTimeTeller.
type MockTimeTellerMockRecorder struct {
	mock *MockTimeTeller
}

// NewMockTimeTeller creates a new mock instance.
func NewMockTimeTeller(ctrl *gomock.Controller) *MockTimeTeller {
	mock := &MockTimeTeller{ctrl: ctrl}
	mock.recorder = &MockTimeTellerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeTeller) EXPECT() *MockTimeTellerMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockTimeTeller) Now() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeTellerMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTimeTeller)(nil).Now))
}
