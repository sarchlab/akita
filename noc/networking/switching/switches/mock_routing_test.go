// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/akita/v4/noc/networking/routing (interfaces: Table)
//
// Generated by this command:
//
//	mockgen -destination mock_routing_test.go -package switches -write_package_comment=false github.com/sarchlab/akita/v4/noc/networking/routing Table
//

package switches

import (
	reflect "reflect"

	sim "github.com/sarchlab/akita/v4/sim"
	gomock "go.uber.org/mock/gomock"
)

// MockTable is a mock of Table interface.
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *MockTableMockRecorder
	isgomock struct{}
}

// MockTableMockRecorder is the mock recorder for MockTable.
type MockTableMockRecorder struct {
	mock *MockTable
}

// NewMockTable creates a new mock instance.
func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &MockTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTable) EXPECT() *MockTableMockRecorder {
	return m.recorder
}

// DefineDefaultRoute mocks base method.
func (m *MockTable) DefineDefaultRoute(outputPort sim.RemotePort) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DefineDefaultRoute", outputPort)
}

// DefineDefaultRoute indicates an expected call of DefineDefaultRoute.
func (mr *MockTableMockRecorder) DefineDefaultRoute(outputPort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineDefaultRoute", reflect.TypeOf((*MockTable)(nil).DefineDefaultRoute), outputPort)
}

// DefineRoute mocks base method.
func (m *MockTable) DefineRoute(finalDst, outputPort sim.RemotePort) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DefineRoute", finalDst, outputPort)
}

// DefineRoute indicates an expected call of DefineRoute.
func (mr *MockTableMockRecorder) DefineRoute(finalDst, outputPort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineRoute", reflect.TypeOf((*MockTable)(nil).DefineRoute), finalDst, outputPort)
}

// FindPort mocks base method.
func (m *MockTable) FindPort(dst sim.RemotePort) sim.RemotePort {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPort", dst)
	ret0, _ := ret[0].(sim.RemotePort)
	return ret0
}

// FindPort indicates an expected call of FindPort.
func (mr *MockTableMockRecorder) FindPort(dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPort", reflect.TypeOf((*MockTable)(nil).FindPort), dst)
}
