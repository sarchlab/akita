// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarchlab/akita/v4/sim (interfaces: Port,Component)
//
// Generated by this command:
//
//	mockgen -destination mock_sim_test.go -package simulation -write_package_comment=false github.com/sarchlab/akita/v4/sim Port,Component
//

package simulation

import (
	reflect "reflect"

	hooking "github.com/sarchlab/akita/v4/instrumentation/hooking"
	sim "github.com/sarchlab/akita/v4/sim"
	gomock "go.uber.org/mock/gomock"
)

// MockPort is a mock of Port interface.
type MockPort struct {
	ctrl     *gomock.Controller
	recorder *MockPortMockRecorder
	isgomock struct{}
}

// MockPortMockRecorder is the mock recorder for MockPort.
type MockPortMockRecorder struct {
	mock *MockPort
}

// NewMockPort creates a new mock instance.
func NewMockPort(ctrl *gomock.Controller) *MockPort {
	mock := &MockPort{ctrl: ctrl}
	mock.recorder = &MockPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPort) EXPECT() *MockPortMockRecorder {
	return m.recorder
}

// AcceptHook mocks base method.
func (m *MockPort) AcceptHook(hook hooking.Hook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AcceptHook", hook)
}

// AcceptHook indicates an expected call of AcceptHook.
func (mr *MockPortMockRecorder) AcceptHook(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptHook", reflect.TypeOf((*MockPort)(nil).AcceptHook), hook)
}

// AsRemote mocks base method.
func (m *MockPort) AsRemote() sim.RemotePort {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsRemote")
	ret0, _ := ret[0].(sim.RemotePort)
	return ret0
}

// AsRemote indicates an expected call of AsRemote.
func (mr *MockPortMockRecorder) AsRemote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsRemote", reflect.TypeOf((*MockPort)(nil).AsRemote))
}

// CanSend mocks base method.
func (m *MockPort) CanSend() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSend")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanSend indicates an expected call of CanSend.
func (mr *MockPortMockRecorder) CanSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSend", reflect.TypeOf((*MockPort)(nil).CanSend))
}

// Component mocks base method.
func (m *MockPort) Component() sim.Component {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Component")
	ret0, _ := ret[0].(sim.Component)
	return ret0
}

// Component indicates an expected call of Component.
func (mr *MockPortMockRecorder) Component() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Component", reflect.TypeOf((*MockPort)(nil).Component))
}

// Deliver mocks base method.
func (m *MockPort) Deliver(msg sim.Msg) *sim.SendError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deliver", msg)
	ret0, _ := ret[0].(*sim.SendError)
	return ret0
}

// Deliver indicates an expected call of Deliver.
func (mr *MockPortMockRecorder) Deliver(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deliver", reflect.TypeOf((*MockPort)(nil).Deliver), msg)
}

// Hooks mocks base method.
func (m *MockPort) Hooks() []hooking.Hook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hooks")
	ret0, _ := ret[0].([]hooking.Hook)
	return ret0
}

// Hooks indicates an expected call of Hooks.
func (mr *MockPortMockRecorder) Hooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hooks", reflect.TypeOf((*MockPort)(nil).Hooks))
}

// InvokeHook mocks base method.
func (m *MockPort) InvokeHook(ctx hooking.HookCtx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvokeHook", ctx)
}

// InvokeHook indicates an expected call of InvokeHook.
func (mr *MockPortMockRecorder) InvokeHook(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeHook", reflect.TypeOf((*MockPort)(nil).InvokeHook), ctx)
}

// Name mocks base method.
func (m *MockPort) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPortMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPort)(nil).Name))
}

// NotifyAvailable mocks base method.
func (m *MockPort) NotifyAvailable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyAvailable")
}

// NotifyAvailable indicates an expected call of NotifyAvailable.
func (mr *MockPortMockRecorder) NotifyAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAvailable", reflect.TypeOf((*MockPort)(nil).NotifyAvailable))
}

// NumHooks mocks base method.
func (m *MockPort) NumHooks() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumHooks")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumHooks indicates an expected call of NumHooks.
func (mr *MockPortMockRecorder) NumHooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumHooks", reflect.TypeOf((*MockPort)(nil).NumHooks))
}

// PeekIncoming mocks base method.
func (m *MockPort) PeekIncoming() sim.Msg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeekIncoming")
	ret0, _ := ret[0].(sim.Msg)
	return ret0
}

// PeekIncoming indicates an expected call of PeekIncoming.
func (mr *MockPortMockRecorder) PeekIncoming() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeekIncoming", reflect.TypeOf((*MockPort)(nil).PeekIncoming))
}

// PeekOutgoing mocks base method.
func (m *MockPort) PeekOutgoing() sim.Msg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeekOutgoing")
	ret0, _ := ret[0].(sim.Msg)
	return ret0
}

// PeekOutgoing indicates an expected call of PeekOutgoing.
func (mr *MockPortMockRecorder) PeekOutgoing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeekOutgoing", reflect.TypeOf((*MockPort)(nil).PeekOutgoing))
}

// RetrieveIncoming mocks base method.
func (m *MockPort) RetrieveIncoming() sim.Msg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveIncoming")
	ret0, _ := ret[0].(sim.Msg)
	return ret0
}

// RetrieveIncoming indicates an expected call of RetrieveIncoming.
func (mr *MockPortMockRecorder) RetrieveIncoming() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveIncoming", reflect.TypeOf((*MockPort)(nil).RetrieveIncoming))
}

// RetrieveOutgoing mocks base method.
func (m *MockPort) RetrieveOutgoing() sim.Msg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveOutgoing")
	ret0, _ := ret[0].(sim.Msg)
	return ret0
}

// RetrieveOutgoing indicates an expected call of RetrieveOutgoing.
func (mr *MockPortMockRecorder) RetrieveOutgoing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveOutgoing", reflect.TypeOf((*MockPort)(nil).RetrieveOutgoing))
}

// Send mocks base method.
func (m *MockPort) Send(msg sim.Msg) *sim.SendError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", msg)
	ret0, _ := ret[0].(*sim.SendError)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPortMockRecorder) Send(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPort)(nil).Send), msg)
}

// SetConnection mocks base method.
func (m *MockPort) SetConnection(conn sim.Connection) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnection", conn)
}

// SetConnection indicates an expected call of SetConnection.
func (mr *MockPortMockRecorder) SetConnection(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnection", reflect.TypeOf((*MockPort)(nil).SetConnection), conn)
}

// MockComponent is a mock of Component interface.
type MockComponent struct {
	ctrl     *gomock.Controller
	recorder *MockComponentMockRecorder
	isgomock struct{}
}

// MockComponentMockRecorder is the mock recorder for MockComponent.
type MockComponentMockRecorder struct {
	mock *MockComponent
}

// NewMockComponent creates a new mock instance.
func NewMockComponent(ctrl *gomock.Controller) *MockComponent {
	mock := &MockComponent{ctrl: ctrl}
	mock.recorder = &MockComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponent) EXPECT() *MockComponentMockRecorder {
	return m.recorder
}

// AcceptHook mocks base method.
func (m *MockComponent) AcceptHook(hook hooking.Hook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AcceptHook", hook)
}

// AcceptHook indicates an expected call of AcceptHook.
func (mr *MockComponentMockRecorder) AcceptHook(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptHook", reflect.TypeOf((*MockComponent)(nil).AcceptHook), hook)
}

// AddPort mocks base method.
func (m *MockComponent) AddPort(name string, port sim.Port) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPort", name, port)
}

// AddPort indicates an expected call of AddPort.
func (mr *MockComponentMockRecorder) AddPort(name, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPort", reflect.TypeOf((*MockComponent)(nil).AddPort), name, port)
}

// GetPortByName mocks base method.
func (m *MockComponent) GetPortByName(name string) sim.Port {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortByName", name)
	ret0, _ := ret[0].(sim.Port)
	return ret0
}

// GetPortByName indicates an expected call of GetPortByName.
func (mr *MockComponentMockRecorder) GetPortByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortByName", reflect.TypeOf((*MockComponent)(nil).GetPortByName), name)
}

// Handle mocks base method.
func (m *MockComponent) Handle(e sim.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockComponentMockRecorder) Handle(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockComponent)(nil).Handle), e)
}

// Hooks mocks base method.
func (m *MockComponent) Hooks() []hooking.Hook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hooks")
	ret0, _ := ret[0].([]hooking.Hook)
	return ret0
}

// Hooks indicates an expected call of Hooks.
func (mr *MockComponentMockRecorder) Hooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hooks", reflect.TypeOf((*MockComponent)(nil).Hooks))
}

// InvokeHook mocks base method.
func (m *MockComponent) InvokeHook(ctx hooking.HookCtx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvokeHook", ctx)
}

// InvokeHook indicates an expected call of InvokeHook.
func (mr *MockComponentMockRecorder) InvokeHook(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeHook", reflect.TypeOf((*MockComponent)(nil).InvokeHook), ctx)
}

// Name mocks base method.
func (m *MockComponent) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockComponentMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockComponent)(nil).Name))
}

// NotifyPortFree mocks base method.
func (m *MockComponent) NotifyPortFree(port sim.Port) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyPortFree", port)
}

// NotifyPortFree indicates an expected call of NotifyPortFree.
func (mr *MockComponentMockRecorder) NotifyPortFree(port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyPortFree", reflect.TypeOf((*MockComponent)(nil).NotifyPortFree), port)
}

// NotifyRecv mocks base method.
func (m *MockComponent) NotifyRecv(port sim.Port) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyRecv", port)
}

// NotifyRecv indicates an expected call of NotifyRecv.
func (mr *MockComponentMockRecorder) NotifyRecv(port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRecv", reflect.TypeOf((*MockComponent)(nil).NotifyRecv), port)
}

// NumHooks mocks base method.
func (m *MockComponent) NumHooks() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumHooks")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumHooks indicates an expected call of NumHooks.
func (mr *MockComponentMockRecorder) NumHooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumHooks", reflect.TypeOf((*MockComponent)(nil).NumHooks))
}

// Ports mocks base method.
func (m *MockComponent) Ports() []sim.Port {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ports")
	ret0, _ := ret[0].([]sim.Port)
	return ret0
}

// Ports indicates an expected call of Ports.
func (mr *MockComponentMockRecorder) Ports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ports", reflect.TypeOf((*MockComponent)(nil).Ports))
}
